javascript: (async function () { var navbar = (document.getElementsByClassName("css-3b7q7p")[0]).children[1]; var navLength = navbar.children.length; const adrsChngNav = navbar.children[navLength - 3]; const rtrnMailNav = navbar.children[navLength - 4]; const currentDate = new Date(); console.log("Please wait, while report is being generated..."); let monthsArray = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]; let targetMonth = monthsArray[currentDate.getMonth() - 6]; console.log("Target month is", targetMonth); let rtrnMailPolicyList = {}; let rcvdAdrsList = {}; for (let i = 0; i < 6; i++) {     rtrnMailPolicyList[monthsArray[currentDate.getMonth() - i]] = new Set();     rcvdAdrsList[monthsArray[currentDate.getMonth() - i]] = new Set(); } async function simulateScroll(element) {         const distance = 2;         const boundingRect = element.getBoundingClientRect();         const startX = boundingRect.left + (boundingRect.width / 2);         const startY = boundingRect.top + (boundingRect.height / 2);         element.dispatchEvent(new MouseEvent('mousedown', {             clientX: startX,             clientY: startY,             bubbles: true         }));         for (let step = 0; step < distance; step += 1) {             element.dispatchEvent(new MouseEvent('mousemove', {                 clientX: startX,                 clientY: startY + step,                 bubbles: true             }));             await new Promise(resolve => setTimeout(resolve, 100));         }         element.dispatchEvent(new MouseEvent('mouseup', {             clientX: startX,             clientY: startY + distance,             bubbles: true         }));         await new Promise(resolve => setTimeout(resolve, 2500)); } function addPolicy(policyNumber, month,list) {     let currMonthList = list[month];     if (!currMonthList.has(policyNumber)) {         currMonthList.add(policyNumber);     } } function deletePolicy(policyNumber) {     let result = false;     for (let i = 0; i < 6; i++) {         let currMonthList = rtrnMailPolicyList[monthsArray[currentDate.getMonth() - i]];         if (currMonthList.has(policyNumber)) {             (rtrnMailPolicyList[monthsArray[currentDate.getMonth() - i]]).delete(policyNumber);             addPolicy(policyNumber, monthsArray[currentDate.getMonth() - i],rcvdAdrsList);             result = true;         }     }     return result; } function countTotalMails(rtrnMailPolicyList){     let finalCount = 0;     for(let x = 0; x < 6; x++){         let currMonthList = rtrnMailPolicyList[monthsArray[currentDate.getMonth() - x]];         finalCount += currMonthList.size;     }     return finalCount; } function extractPolicyNum(policyNumText, isRMreport) {     if (isRMreport) {         policyNumText = policyNumText.split(" ");         if ((policyNumText[0]).toLowerCase() === "fw:" || (policyNumText[0]).toLowerCase() === "cics" || (policyNumText[0]).toLowerCase() === "pass") {             if ((policyNumText[0]).toLowerCase() === "fw:" && (policyNumText[1]).toLowerCase() === "cics") {                 return policyNumText[2];             }             else {                 return policyNumText[1];             }         }         else {             return policyNumText[0];         }     }     else {          let regex = /#\s*:?\s*(\S+)/;%20%20%20%20%20%20%20%20%20let%20match%20=%20policyNumText.match(regex);%20%20%20%20%20%20%20%20%20let%20policyNumber%20=%20match%20?%20match[1]%20:%20null;%20%20%20%20%20%20%20%20%20return%20policyNumber;%20%20%20%20%20}%20}%20async%20function%20sortCreatedList(){%20%20%20%20%20var%20createdBtn%20=%20document.querySelector(%22.css-1078jy%22);%20%20%20%20%20createdBtn.click();%20%20%20%20%20await%20new%20Promise(resolve%20=%3E%20setTimeout(resolve,%204000));%20%20%20%20%20createdBtn%20=%20document.querySelector(%22.css-1078jy%22);%20%20%20%20%20createdBtn.click();%20%20%20%20%20await%20new%20Promise(resolve%20=%3E%20setTimeout(resolve,%204000));%20}%20%20async%20function%20generateReport(isRMreport)%20{%20%20%20%20%20await%20sortCreatedList();%20%20%20%20%20const%20rtnMailsList%20=%20document.querySelectorAll(%22._ca0q1b66._n3tdhkvd%22)[0];%20%20%20%20%20const%20scrollElement%20=%20document.querySelector('.track-vertical').firstChild;%20%20%20%20%20var%20allTickets%20=%20rtnMailsList.children;%20%20%20%20%20var%20countAdrsChanges%20=%200;%20%20%20%20%20for%20(var%20i%20=%200;%20i%20%3C%2035;%20i++)%20{%20%20%20%20%20%20%20%20%20var%20eachTicket%20=%20allTickets[i];%20%20%20%20%20%20%20%20%20try%20{%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(eachTicket%20&&%20eachTicket.classList.contains(%22_4t3i2nrh%22))%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20await%20simulateScroll(scrollElement);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20i%20=%207;%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20else%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20var%20eachCol%20=%20eachTicket.querySelectorAll(%22._1e0c1txw._4cvr1h6o._1tke1ylp._vchhusvi._1bsb1osq%22);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(eachCol[2])%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20var%20dateCreated%20=%20eachCol[2].firstChild.firstChild.innerText;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20var%20policyNumText%20=%20(eachCol[1].firstChild.firstChild.firstChild.innerText);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20var%20policyNum%20=%20extractPolicyNum(policyNumText,%20isRMreport);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let%20month%20=%20dateCreated.substring(3,%206);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(month%20===%20targetMonth)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20break;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(isRMreport)%20{%20addPolicy(policyNum,%20month,rtrnMailPolicyList);%20}%20else%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20countAdrsChanges%20+=%20deletePolicy(policyNum)%20?%201%20:%200;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20catch%20(e)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20console.error(%22here%20is%20the%20error%22,%20eachTicket,%20e);%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20}%20%20%20%20%20var%20listName%20=%20isRMreport%20?%20%22Return%20Mails%22%20:%20%22New%20Addresses%22;%20%20%20%20%20var%20count%20=%20isRMreport%20?%20countTotalMails(rtrnMailPolicyList)%20:%20countAdrsChanges;%20%20%20%20%20console.log(%22There%20were%20total%22,%20count,%20listName,%20%22received%20from%20the%20month%20of%22,%20monthsArray[currentDate.getMonth()%20-%205],%20%22to%22,%20monthsArray[currentDate.getMonth()]);%20}%20rtrnMailNav.firstChild.click();%20await%20new%20Promise(resolve%20=%3E%20setTimeout(resolve,%20200));%20await%20generateReport(true);%20adrsChngNav.firstChild.click();%20await%20new%20Promise(resolve%20=%3E%20setTimeout(resolve,%20200));%20await%20generateReport(false);%20let%20finalTime%20=%20new%20Date();%20let%20diff%20=%20finalTime%20-%20currentDate;%20let%20minutes%20=%20Math.floor(diff%20/%2060000);%20let%20seconds%20=%20((diff%20%%2060000)%20/%201000).toFixed(0);%20console.log(%22\n%22);%20for(var%20i%20=%200;%20i%3C6%20;%20i++%20){%20%20%20%20%20var%20rtnMailTotalCount%20=%20rtrnMailPolicyList[monthsArray[currentDate.getMonth()%20-%20i]].size;%20%20%20%20%20var%20adrsRcvdTotalCount%20=%20rcvdAdrsList[monthsArray[currentDate.getMonth()%20-%20i]].size;%20%20%20%20%20var%20total%20=%20rtnMailTotalCount%20+%20adrsRcvdTotalCount;%20%20%20%20%20console.log(%22In%20%22,%20monthsArray[currentDate.getMonth()%20-%20i],%20%22%20we%20received%20total%20%22,%20adrsRcvdTotalCount,%20%22%20new%20addresses%20out%20of%20%22,%20rtnMailTotalCount,%20%22%20return%20mails.%22)%20}%20console.log(%22\nList%20of%20Policies%20whose%20address%20we%20never%20received:%20%22,rtrnMailPolicyList);%20console.log(%22List%20of%20Policies%20whose%20address%20we%20received:%20%22,rcvdAdrsList,%22\n%22);%20let%20executionTime%20=%20%22Program%20took%20%22%20+%20minutes%20+%20%22%20minutes%20and%20%22%20+%20seconds%20+%20%22%20seconds%20to%20execute.%22;%20console.log(%22\nTotal%20number%20of%20policies%20with%20DONOT%20mail:%20%22,%20countTotalMails(rtrnMailPolicyList),%20%22(Meaning%20we%20didn't%20receive%20new%20address%20for%20these%20policies)%22);%20console.log(executionTime);%20})();
